/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package interfaz;


import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import poo.clases.Anfitrion;
import poo.clases.Cliente;
import poo.clases.JavaBNB;
import poo.clases.Particular;

/**
 *
 * @author Marcos Barroso
 */
public class PanelClientes extends javax.swing.JPanel {

    /**
     * Creates new form PanelClientes
     */
    public PanelClientes() {
        initComponents();
        mostrarDatos();
    }
    List<Cliente> busquedasAnt = new ArrayList<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxTipo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jFormattedTextFieldDni = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Cliente", "Tipo", "TelÃ©fono", "Correo", "DNI", "VIP / Superanfitrion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(195);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(110);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(120);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Mostrar");

        jComboBoxTipo.setBackground(new java.awt.Color(255, 153, 51));
        jComboBoxTipo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBoxTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Anfitrion", "Particular" }));
        jComboBoxTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTipoActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Buscar por DNI:");

        try {
            jFormattedTextFieldDni.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("########U")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldDni.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jButton1.setBackground(new java.awt.Color(255, 153, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 861, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFormattedTextFieldDni, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jFormattedTextFieldDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTipoActionPerformed
        // TODO add your handling code here:
        if (jComboBoxTipo.getSelectedItem().equals("Particular")) {
            mostrarDatos("Particular");
        } else if (jComboBoxTipo.getSelectedItem().equals("Anfitrion")) {
            mostrarDatos("Anfitrion");
        } else if (jComboBoxTipo.getSelectedItem().equals("Todos"))
            mostrarDatos();
    }//GEN-LAST:event_jComboBoxTipoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        mostrarDatosDni(jFormattedTextFieldDni.getText());
    }//GEN-LAST:event_jButton1ActionPerformed
    private void limpiarTabla(List<Cliente> busquedas) {
        int contador = 0;
        for (Cliente c : busquedas) {
            jTable1.setValueAt(null, contador, 0);
            jTable1.setValueAt(null, contador, 1);
            jTable1.setValueAt(null, contador, 2);
            jTable1.setValueAt(null, contador, 3);
            jTable1.setValueAt(null, contador, 4);
            jTable1.setValueAt(null, contador, 5);
            contador++;
        }
    }
    
    /**
     * Muestra todos los clientes.
     */
    private void mostrarDatos() {
        try {
            limpiarTabla(busquedasAnt);
            List<Cliente> clientes = JavaBNB.getClientes();

            int contador = 0;

            for (Cliente c : clientes) {
                String tipo = c.getClass().getSimpleName();
                jTable1.setValueAt(c.getNombre(), contador, 0);
                jTable1.setValueAt(tipo, contador, 1);
                jTable1.setValueAt(c.getTelefono(), contador, 2);
                jTable1.setValueAt(c.getCorreo(), contador, 3);
                jTable1.setValueAt(c.getDni(), contador, 4);
                if (tipo.equals("Particular")) {
                    Particular p = (Particular) c;
                    if (p.isVip()) {
                        jTable1.setValueAt("SÃ­", contador, 5);
                    } else {
                        jTable1.setValueAt("No", contador, 5);
                    }
                } else if (tipo.equals("Anfitrion")) {
                    Anfitrion a = (Anfitrion) c;
                    if (a.isSuperAnfitrion()) {
                        jTable1.setValueAt("SÃ­", contador, 5);
                    } else {
                        jTable1.setValueAt("No", contador, 5);
                    }
                }
                contador++;
            }
            busquedasAnt = clientes;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Mensaje", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    /**
     * Muestra los clientes del tipo que se indique
     * @param tipoCliente 
     */
    private void mostrarDatos(String tipoCliente) {
        try {
            limpiarTabla(busquedasAnt);
            List<Cliente> clientes = JavaBNB.getClientes();

            int contador = 0;

            for (Cliente c : clientes) {
                String tipo = c.getClass().getSimpleName();
                if (tipo.equals(tipoCliente)) {
                    jTable1.setValueAt(c.getNombre(), contador, 0);
                    jTable1.setValueAt(tipo, contador, 1);
                    jTable1.setValueAt(c.getTelefono(), contador, 2);
                    jTable1.setValueAt(c.getCorreo(), contador, 3);
                    jTable1.setValueAt(c.getDni(), contador, 4);
                    if (tipo.equals("Particular")) {
                        Particular p = (Particular) c;
                        if (p.isVip()) {
                            jTable1.setValueAt("SÃ­", contador, 5);
                        } else {
                            jTable1.setValueAt("No", contador, 5);
                        }
                    } else if (tipo.equals("Anfitrion")) {
                        Anfitrion a = (Anfitrion) c;
                        if (a.isSuperAnfitrion()) {
                            jTable1.setValueAt("SÃ­", contador, 5);
                        } else {
                            jTable1.setValueAt("No", contador, 5);
                        }
                    }
                    contador++;
                }
            }
            busquedasAnt = clientes;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Mensaje", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     *  Muestra los datos del cliente que tenga el dni que se pasa como parÃ¡metro
     * @param dni 
     */
    private void mostrarDatosDni(String dni) {
        try {
            limpiarTabla(busquedasAnt);
            List<Cliente> clientes = JavaBNB.getClientes();

            int contador = 0;

            for (Cliente c : clientes) {
                String tipo = c.getClass().getSimpleName();
                if (c.getDni().equals(dni)) {
                    jTable1.setValueAt(c.getNombre(), contador, 0);
                    jTable1.setValueAt(tipo, contador, 1);
                    jTable1.setValueAt(c.getTelefono(), contador, 2);
                    jTable1.setValueAt(c.getCorreo(), contador, 3);
                    jTable1.setValueAt(c.getDni(), contador, 4);
                    if (tipo.equals("Particular")) {
                        Particular p = (Particular) c;
                        if (p.isVip()) {
                            jTable1.setValueAt("SÃ", contador, 5);
                        } else {
                            jTable1.setValueAt("NO", contador, 5);
                        }
                    } else if (tipo.equals("Anfitrion")) {
                        Anfitrion a = (Anfitrion) c;
                        if (a.isSuperAnfitrion()) {
                            jTable1.setValueAt("SÃ", contador, 5);
                        } else {
                            jTable1.setValueAt("NO", contador, 5);
                        }
                    }
                    contador++;
                }
            }
            busquedasAnt = clientes;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Mensaje", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBoxTipo;
    private javax.swing.JFormattedTextField jFormattedTextFieldDni;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
