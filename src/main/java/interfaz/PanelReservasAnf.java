/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package interfaz;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import poo.clases.Anfitrion;
import poo.clases.Inmueble;
import poo.clases.JavaBNB;
import poo.clases.Reserva;

/**
 *
 * @author Marcos Barroso
 */
public class PanelReservasAnf extends javax.swing.JPanel {
    List<Reserva> busquedasAnt = new ArrayList<>();
    private final Anfitrion anfitrion;
    ArrayList<Reserva> reservas;
    
    /**
     * Creates new form of PanelReservasAnf
     * @param a anfitrion
     */
    public PanelReservasAnf(Anfitrion a) {
        this.anfitrion=a;
        initComponents();
        reservas = anfitrion.getReservaAnfitrion();
        mostrarDatos();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Inmueble", "Cliente", "Teléfono", "VIP", "Fecha Reserva", "Fecha entrada", "Fecha salida", "Días", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(145);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(155);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(125);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(8).setPreferredWidth(60);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Buscar por inmueble:");

        getInmuebles();
        jComboBox1.setBackground(new java.awt.Color(255, 153, 51));
        jComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 957, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        try {
            String selection = (String) jComboBox1.getSelectedItem();
            if (selection.equals("Todos")) {
                mostrarDatos();
            } else {
                Inmueble inmueble=null;
                for (Inmueble i : JavaBNB.getInmuebles()) {
                    if (i.getTitulo().equals(selection)) {
                        inmueble=i;
                        break;
                    }
                }
                ArrayList<Reserva> reservasFilterTitulo = inmueble.getReservasInmueble();
                mostrarDatos(reservasFilterTitulo);
            }
        }  catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "No hay reservas", "Mensaje", JOptionPane.ERROR_MESSAGE);
        }catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Mensaje", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    //rellena las opciones con los inmuebles del anfitrion
    private void getInmuebles() {
        try {
            ArrayList<String> inmuebles = (ArrayList) anfitrion.getInmueblesAnfitrion().stream().map(Inmueble::getTitulo).collect(Collectors.toList());
            inmuebles.add(0, "Todos");
            jComboBox1 = new JComboBox(inmuebles.toArray());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Mensaje", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void limpiarTabla(List<Reserva> busquedas) {
        try {
            int contador = 0;
            for (Reserva r : busquedas) {
                jTable1.setValueAt(null, contador, 0);
                jTable1.setValueAt(null, contador, 1);
                jTable1.setValueAt(null, contador, 2);
                jTable1.setValueAt(null, contador, 3);
                jTable1.setValueAt(null, contador, 4);
                jTable1.setValueAt(null, contador, 5);
                jTable1.setValueAt(null, contador, 6);
                jTable1.setValueAt(null, contador, 7);
                jTable1.setValueAt(null, contador, 8);
                contador++;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Mensaje", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void mostrarDatos() {
        try {
            limpiarTabla(busquedasAnt);
            
            int contador = 0;
            
            for (Reserva r : reservas) {
                DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                jTable1.setValueAt(r.getInmueble().getTitulo(), contador, 0);
                jTable1.setValueAt(r.getCliente().getNombre(), contador, 1);
                jTable1.setValueAt(r.getCliente().getTelefono(), contador, 2);
                String vip;
                if (r.getCliente().isVip()) {
                    vip = "Sí";
                } else {
                    vip = "No";
                }
                jTable1.setValueAt(vip, contador, 3);
                jTable1.setValueAt(r.getFechaReserva().format(formatoCorto), contador, 4);
                jTable1.setValueAt(r.getFechaEntrada().format(formatoCorto), contador, 5);
                jTable1.setValueAt(r.getFechaSalida().format(formatoCorto), contador, 6);
                jTable1.setValueAt(r.getDias(), contador, 7);
                jTable1.setValueAt(r.getPrecio(), contador, 8);
                contador++;
            }
            busquedasAnt = reservas;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Mensaje", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void mostrarDatos(ArrayList<Reserva> reservasInmueble) {
        try {
            limpiarTabla(busquedasAnt);
            
            int contador = 0;
            
            for (Reserva r : reservasInmueble) {
                DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                jTable1.setValueAt(r.getInmueble().getTitulo(), contador, 0);
                jTable1.setValueAt(r.getCliente().getNombre(), contador, 1);
                jTable1.setValueAt(r.getCliente().getTelefono(), contador, 2);
                String vip;
                if (r.getCliente().isVip()) {
                    vip = "Sí";
                } else {
                    vip = "No";
                }
                jTable1.setValueAt(vip, contador, 3);
                jTable1.setValueAt(r.getFechaReserva().format(formatoCorto), contador, 4);
                jTable1.setValueAt(r.getFechaEntrada().format(formatoCorto), contador, 5);
                jTable1.setValueAt(r.getFechaSalida().format(formatoCorto), contador, 6);
                jTable1.setValueAt(r.getDias(), contador, 7);
                jTable1.setValueAt(r.getPrecio(), contador, 8);
                contador++;
            }
            busquedasAnt = reservasInmueble;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Mensaje", JOptionPane.ERROR_MESSAGE);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
